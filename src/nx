#!/bin/sh
: ${NX_DIR:="$HOME/.nx"}

parse_opts () {
  # If cmd empty enter interactive session
  if [[ -z "$1" ]]; then
    usage
    exit 0
  fi

  squawk 5 'parse opts'

  ORIGINAL_OPTS=$@
  # Execute getopt on the arguments passed to this program, identified by the special character $@
  short_opts="fhvyV:"
  long_opts="help,force,yes,verbose,verbosity:,debug"
  PARSED_OPTIONS=$(getopt --alternative -n "$0" -o "$short_opts" --long "$long_opts" -- "$@")

  #Bad arguments, something has gone wrong with the getopt command.
  if [[ $? -ne 0 ]];
  then
    horizontal_rule
    croak 3  'bad argruments'
  fi

  # A little magic, necessary when using getopt.
  eval set -- "$PARSED_OPTIONS"

  squawk 5 'loop through opts'

  opt_loop_count=1
  while true; do
    squawk 5 "$opt_loop_count $@"
    ((++opt_loop_count))
    case "$1" in
      -h|--help)
        print_help=true
        shift;;
      -f|--force)
        use_the_force_luke=true
        shift;;
      --debug)
        debug=true
        shift;;
      -y|--yes)
        ANSWER_YES=yes
        shift;;
      -v|--verbose)
        increase_verbosity
        shift;;
      -V|--verbosity)
        set_verbosity $2
        shift 2 ;;
      --)
        shift
        break;;
    esac
  done

  squawk 7 "Check args"

  if [[ $# -eq 0 ]]; then
    nx_interactive
  fi
  RAISON=$1
  squawk 5 "Raison set to $RAISON"
  shift


  if [[ $RAISON = "false" || "$RAISON" = "help" ]]; then
    horizontal_rule
    usage
    exit 1
  fi

  if [[ $RAISON == "s" ]]; then
    nix_search $@
  elif [[ $RAISON == "ac" ]]; then
    time apply_colmena $@
  elif [[ $RAISON == "as" ]]; then
    time apply_system $@
  elif [[ $RAISON == "au" ]]; then
    time apply_user $@
  elif [[ $RAISON == "gc" ]]; then
    time garbage_collector $@
  elif [[ $RAISON == "ec" ]]; then
    edit_config $@
  elif [[ $RAISON == "ef" ]]; then
    edit_flake $@
  elif [[ $RAISON == "eu" ]]; then
    edit_user_config $@
  elif [[ $RAISON == "am" ]]; then
    cd "${NX_DIR}"
    set -x
    git commit -am "$1" 
  elif [[ $RAISON == "us" ]]; then
    update_system
  elif [[ $RAISON == "uu" ]]; then
    nix-channel --update
  elif [[ $RAISON == "o" ]]; then
    time optimizer
  elif [[ $RAISON == "test" ]]; then
    echo ok
    exit 0
  elif [[ $RAISON == "auto" ]]; then
    full_auto
  else
    squawk 8 'passthru'
    # Else fall through to passing on to nix 
    if [[ $print_help == "true" ]]; then
      horizontal_rule
      usage
      exit 1
    fi
    squawk 5 "nix $RAISON $@"
    nix $RAISON $@
  fi

  if [[ $print_help == "true" ]]; then
    horizontal_rule
    usage
    exit 1
  fi
}

usage () {
  printf "nx - one less letter to type than nix\n"
  printf "nx is an opinionated tool I use to manage my NixOS installations.\n"
  printf "by default it uses a directory in your home '~/.nx'\n"
  printf "USAGE:\n"
  printf "apply-colmena:\t\tnx ac GROUP\n"
  printf "apply-system:\t\tnx as\n"
  printf "git-commit-am:\t\tnx am\n"
  printf "apply-user:\t\tnx au\n"
  printf "full-auto:\t\tnx auto\n"
  printf "edit-config:\t\tnx ec\n"
  printf "edit-flake:\t\tnx ef\n"
  printf "edit-group-flake:\tnx ef GROUP\n"
  printf "edit-user-config:\tnx eu\n"
  printf "garbage-collector:\tnx gc\n"
  printf "optimize+gc:\t\tnx o\n"
  printf "search PACKAGE:\t\tnx s PACKAGE\n"
  printf "update-system:\t\tnx us\n"
  printf "update-user:\t\tnx uu\n"
}

edit_config () {
  THIS_HOST=$(hostname)
  SRC="${NX_DIR}/hosts/$THIS_HOST/configuration.nix"
  $EDITOR $SRC
}

edit_flake () {
  if [ $# -eq 1 ]; then
    THIS_GROUP=$1
    SRC="${NX_DIR}/groups/$THIS_GROUP/flake.nix"
  else
    THIS_HOST=$(hostname)
    SRC="${NX_DIR}/hosts/$THIS_HOST/flake.nix"
  fi
  $EDITOR $SRC
}

edit_user_config () {
  THIS_HOST=$(hostname)
  SRC="${NX_DIR}/hosts/$THIS_HOST/users/$USER/home.nix"
  $EDITOR $SRC
}

defunct_apply_user () {
  check_git_status
  THIS_GROUP=users
  THIS_HOST=$(hostname)
  #SRC="${NX_DIR}/hosts/$THIS_HOST/users/$USER"
  SRC="${NX_DIR}/hosts/$THIS_HOST"
  set -x
  cd $SRC
  echo " This appears to be broken https://nix-community.github.io/home-manager/index.xhtml#sec-flakes-nixos-module"
  sleep 3
  exit 1
  nix build .#homeManagerConfiguration.$USER.activationPackage
  ./result/activate
}

apply_user () {
  check_git_status
  THIS_GROUP=users
  THIS_HOST=$(hostname)
  SRC="${NX_DIR}/hosts/$THIS_HOST/users/$USER/home.nix"
  TARGET="$HOME/.config/home-manager/home.nix"
  CMD="home-manager switch"
  set -x
  diff $SRC $TARGET
  if [ $? -eq 0 ]; then
    echo no change
  else
    install -m 0644 -o $USER -g $THIS_GROUP -v $SRC $TARGET
  fi
  $CMD
}

update_system () {
  check_git_status
  THIS_HOST=$(hostname)
  SRC="${NX_DIR}/hosts/$THIS_HOST"
  cd $SRC
  set -x
  sudo nix-channel --update
  nix flake update
  #nix build --recreate-lock-file
  set +x
}

apply_colmena () {
  if [ $# -ne 1 ]; then
    echo 'usage: ./nx ac $GROUP'
    exit 1
  fi
  check_git_status
  THIS_GROUP=$1
  SRC="${NX_DIR}/groups/$THIS_GROUP"
  cd $SRC
  set -x
  colmena apply switch
  set +x
}

apply_system () {
  check_git_status
  THIS_HOST=$(hostname)
  SRC="${NX_DIR}/hosts/$THIS_HOST"
  cd $SRC
  set -x
  sudo nixos-rebuild switch --flake '.#'
  set +x
}

old_apply_system () {
  # this was used before the above flake method
  check_git_status
  THIS_USER=root
  THIS_GROUP=root
  THIS_HOST=$(hostname)
  SRC="${NX_DIR}/hosts/$THIS_HOST"
  TARGET="/etc/nixos"
  CMD="sudo nixos-rebuild switch"
  diff $SRC $TARGET
  if [ $? -eq 0 ]; then
    echo no change
  else
    sudo rsync -v --chown root:root --chmod 0644 $SRC/* $TARGET/
  fi
  set -x
  $CMD
}

full_auto () {
  nix-channel --update
  update_system
  check_git_status
  apply_system $@
  apply_user $@
  garbage_collector $@
  nix-store --optimize
}
check_git_status () {
  cd "${NX_DIR}"
  if output=$(git status --porcelain) && [ -z "$output" ]; then
    # Working directory clean
    echo "clean"
  else 
    # Uncommitted changes
    echo "There are uncommitted changes!"
    if [ "$use_the_force_luke" = 'true' ]; then
      echo 'using the force'
      commy=$(printf "force lock\n%s\n" $(date -I))
      commy+="$(git diff)"
      git commit -am "${commy}"
    else
      echo 'use --force to override'
      exit 1
    fi
  fi
}

garbage_collector ()  {
  nix-env --delete-generations old
  nix-store --gc
  #nix-channel --update
  #nix-env -u --always
  #for link in /nix/var/nix/gcroots/auto/*
  #do
  #  sudo rm $(readlink "$link")
  #done
  nix-collect-garbage -d
}

optimizer () {
  nix-store --optimize
  garbage_collector $@
}

squawk () {
  # This function simplifies error reporting and verbosity
  # and it always prints its message along with anything in $error_report_log
  # call it by preceding your message with a verbosity level
  # e.g. `squawk 3 "This is a squawk"`
  # if the current verbosity level is greater than or equal to
  # the number given then this function will echo out your message
  # and pad it with # to let you now how verbose that message was
  squawk_lvl="$1"
  shift
  squawk="$@"

  if [[ "$VERBOSITY" -ge "$squawk_lvl" ]] ; then
    if [[ "$squawk_lvl" -le 20 ]] ; then
      count_squawk=0
      while [[ "$count_squawk" -lt "$squawk_lvl" ]]; do
        printf '#'
        ((++count_squawk))
      done
      printf ' %s\n' "$squawk"
    else
      printf '#>{ '
      printf '%s' "$squawk_lvl"
      printf ' }<# '
      printf ' %s\n' "$squawk"
    fi
  fi
}

nix_search () {
  nix --extra-experimental-features "nix-command flakes" search nixpkgs $1
}

croak () {
    # The difference between squawk and croak is that croak calls exit 1 at the end
  # This function simplifies error reporting on death and verbosity
  # call it by preceding your error message with a verbosity level
  # e.g. `croak 3 "This is a croak"`
  # if the current verbosity level is greater than or equal to
  # the number given then this function will print out your message
  # and pad it with # to let you now how verbose that message was
  croak_lvl="$1"
  shift
  croak="$@"

  if [[ -z $error_report_log ]]; then
    horizontal_rule
    printf 'Error report log - %s\n' $error_report_log
  fi

  horizontal_rule
  if [[ "$VERBOSITY" -ge "$croak_lvl" ]] ; then
    if [[ "$croak_lvl" -le 20 ]] ; then
      count_croak=0
      while [[ "$count_croak" -lt "$croak_lvl" ]]; do
        printf '#'
        ((++count_croak))
      done
      printf '%s\n'  "$croak"
    else
      printf '#>{ '
      printf '%s' "$croak_lvl"
      printf ' }<# '
      printf ' %s\n'  "$croak"
    fi
  else
    printf ' %s\n'  "$croak"
  fi
  horizontal_rule
  exit 1
}

horizontal_rule () {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

parse_opts $@
