#!/bin/sh
: ${NX_DIR:="${HOME}/.nx"}
: ${NICER:="nice -n11 ionice -c3 "}
: ${VERBOSITY:=0}
: ${print_help:='false'}
: ${debug:='false'}
: ${use_the_force_luke:='false'}
# If cmd empty enter interactive session
usage () {
  printf "nx - one less letter to type than nix\n"
  printf "nx is an opinionated tool I use to manage my NixOS installations.\n"
  printf "by default it uses a directory in your home '~/.nx'\n"
  printf "USAGE:\n"
  printf "apply-colmena:\t\tnx ac GROUP\n"
  printf "apply-colmena:\t\tnx ac GROUP --reboot\n"
  printf "apply-colmena:\t\tnx ac GROUP --reboot host1,host2,host3\n"
  printf "apply-colmena:\t\tnx ac GROUP host1 host2,host3 host4,host5,host6\n"
  printf "git-commit-am:\t\tnx am\n"
  printf "apply-user:\t\tnx au\n"
  printf "full-auto:\t\tnx auto\n"
  printf "garbage-collector:\tnx gc\n"
  printf "update-system:\t\tnx us\n"
  printf "update-user:\t\tnx uu\n"
  printf "edit-group-flake:\tnx ef GROUP\n"
  printf "edit-user-config:\tnx eu\n"
  printf "edit-flake:\t\tnx e\n"
  printf "edit-config:\t\tnx ec\n"
  printf "optimize+gc:\t\tnx o\n"
  printf "git pull:\t\tnx p GROUP\n"
  printf "git push:\t\tnx P GROUP\n"
  printf "search PACKAGE:\t\tnx s PACKAGE\n"
}

deprecated_usage () {
  printf "apply-system:\t\tnx as\n"
}
if [ -z "$1" ]; then
  usage
  exit 0
fi
set -u

show_help () {
  horizontal_rule
  usage
}

set_verbosity () {
  if [ ${1} -gt 0 ]; then
    VERBOSITY=0
  else
    VERBOSITY=${1}
  fi
  squawk 5 " verbosity is now ${VERBOSITY}"
}

parse_opts () {

  squawk 5 'parse opts'

  ORIGINAL_OPTS=$@
  # Execute getopt on the arguments passed to this program, identified by the special character $@
  short_opts="cfhvyV:"
  long_opts="commit,help,force,yes,verbose,verbosity:,debug,reboot"
  PARSED_OPTIONS=$(getopt --alternative -n "$0" -o "$short_opts" --long "$long_opts" -- "$@")

  #Bad arguments, something has gone wrong with the getopt command.
  if [ $? -ne 0 ];
  then
    horizontal_rule
    croak 3  'bad argruments'
  fi

  # A little magic, necessary when using getopt.
  eval set -- "$PARSED_OPTIONS"

  squawk 5 'loop through opts'

  opt_loop_count=1
  while true; do
    squawk 5 "$opt_loop_count $@"
    ((++opt_loop_count))
    case "$1" in
      -h|--help)
        print_help=true
        shift;;
      -f|--force)
        use_the_force_luke=true
        shift;;
      --debug)
        debug=true
        shift;;
      -c|--commit)
        commit=true
        shift;;
      --reboot)
        reboot=true
        shift;;
      -y|--yes)
        ANSWER_YES=yes
        shift;;
      -v|--verbose)
        increase_verbosity
        shift;;
      -V|--verbosity)
        set_verbosity $2
        shift 2 ;;
      --)
        shift
        break;;
    esac
  done

  squawk 7 "Check args"

  if [ $# -eq 0 ]; then
    nx_interactive
  fi
  RAISON=$1
  squawk 5 "Raison set to $RAISON"
  shift
  if [ "$debug" = "true" ]; then
    set -x
  fi


  if [ $RAISON = "false" ]; then
    show_help
    exit 1
  elif [ "$RAISON" = "help" ]; then
    show_help
  fi

  if [ $RAISON = "p" ]; then
    cd ${NX_DIR} && git pull
  elif [ $RAISON = "P" ]; then
    cd ${NX_DIR} && git push
  elif [ $RAISON = "s" ]; then
    nix_search $@
  elif [ $RAISON = "ac" ]; then
    time apply_colmena $@
  elif [ $RAISON = "as" ]; then
    time apply_system $@
  elif [ $RAISON = "au" ]; then
    time apply_user $@
  elif [ $RAISON = "gc" ]; then
    time garbage_collector $@
  elif [ $RAISON = "ec" ]; then
    edit_config $@
  elif [ $RAISON = "e" ]; then
    edit_flake $@
  elif [ $RAISON = "ef" ]; then
    edit_flake $@
  elif [ $RAISON = "eu" ]; then
    edit_user_config $@
  elif [ $RAISON = "am" ]; then
    make_a_commit $@
  elif [ $RAISON = "us" ]; then
    update_system
  elif [ $RAISON = "uu" ]; then
    update_user
  elif [ $RAISON = "o" ]; then
    time optimizer
  elif [ $RAISON = "test" ]; then
    echo ok
    exit 0
  elif [ $RAISON = "auto" ]; then
    full_auto
  else
    squawk 8 'passthru'
    # Else fall through to passing on to nix 
    if [ $print_help = "true" ]; then
      horizontal_rule
      usage
      exit 1
    fi
    squawk 5 "nix $RAISON $@"
    nix $RAISON $@
  fi

  if [ "${print_help}" = "true" ]; then
    horizontal_rule
    usage
    exit 1
  fi
}

edit_config () {
  find_flake_nix_dir
  SRC="${flake_nix_dir}/configuration.nix"
  ${EDITOR} ${SRC}
}

edit_flake () {
  if [ $# -eq 1 ]; then
    THIS_GROUP=$1
    SRC="${NX_DIR}/groups/${THIS_GROUP}/flake.nix"
  else
    find_flake_nix_dir
    SRC="${flake_nix_dir}/flake.nix"
  fi
  ${EDITOR} ${SRC}
}

edit_user_config () {
  find_flake_nix_dir
  USER_DIR="${flake_nix_dir}/users/${USER}"
  if [ ! -d ${USER_DIR} ]; then
    USER_DIR="${NX_DIR}/users/${USER}"
    if [ ! -d ${USER_DIR} ]; then
      echo "cannot find user dir, bailing out"
      exit 1
    fi
  fi
  SRC="${USER_DIR}/home.nix"
  ${EDITOR} ${SRC}
}

auto_commit () {
  cd "${NX_DIR}"
  if ! command -v aicommits &> /dev/null
  then
    commy=$(printf "force lock\n%s\n" $(date -I))
    commy+="$(git diff)"
    set -x
    git commit -am "${commy}"
  else
    aicommits -a -g 5
  fi
}

make_a_commit () {
  if [ $# -eq 0 ]
  then
    auto_commit
  else
    cd "${NX_DIR}"
    set -x
    git commit -am "$@" 
  fi
}

defunct_apply_user () {
  check_git_status
  THIS_GROUP=users
  get_this_host
  #SRC="${NX_DIR}/hosts/${THIS_HOST}/users/$USER"
  SRC="${NX_DIR}/hosts/${THIS_HOST}"
  set -x
  cd ${SRC}
  echo " This appears to be broken https://nix-community.github.io/home-manager/index.xhtml#sec-flakes-nixos-module"
  sleep 3
  exit 1
  nix build .#homeManagerConfiguration.$USER.activationPackage
  ./result/activate
}

find_userconfigs () {
  INPUT_ARG=$1
  THIS_GROUP=users
  TARGET="${HOME}/.config/home-manager/$INPUT_ARG"
  if [ -f "${NX_DIR}/hosts/${THIS_HOST}/users/${USER}/$INPUT_ARG" ]; then
    SRC="${NX_DIR}/hosts/${THIS_HOST}/users/${USER}/$INPUT_ARG"
  elif [ -f "${NX_DIR}/users/${USER}/$INPUT_ARG" ]; then
    SRC="${NX_DIR}/users/${USER}/$INPUT_ARG"
  else
    SRC="${NX_DIR}/hosts/${THIS_HOST}/users/${USER}/$INPUT_ARG"
    ls -alh ${SRC}
    SRC="${NX_DIR}/users/${USER}/$INPUT_ARG"
    ls -alh ${SRC}
    echo "Cannot find user $INPUT_ARG"
  fi
  set -x
  diff ${SRC} ${TARGET}
  if [ $? -eq 0 ]; then
    echo no change
  else
    install -m 0644 -o ${USER} -g ${THIS_GROUP} -v ${SRC} ${TARGET}
  fi
}

apply_user () {
  CMD="home-manager switch"
  check_git_status
  get_this_host
  find_userconfigs home.nix
  find_userconfigs config.nu
  ${CMD}
}

update_user () {
  nix-channel --update
}

rm321 () {
  if [ -f "${SRC}/flake.nix" ]; then
    sudo rm -v "${SRC}/flake.lock"
  else
    echo 'no lock file, proceeding'
  fi
}

update_system () {
  get_this_host
  SRC="${NX_DIR}/hosts/${THIS_HOST}"
  if [ -f "${SRC}/flake.nix" ]; then
    cd ${SRC}
    rm321
  elif [ -f "${NX_DIR}/flake.nix" ]; then
    SRC="${NX_DIR}"
    cd ${SRC}
    rm321
  elif [ -f "/etc/nixos/flake.nix" ]; then
    SRC=/etc/nixos
    cd ${SRC}
    rm321
  else
    echo "I cannot find the system flake.nix! NX_DIR=$NX_DIR host $THIS_HOST"
    exit 1
  fi
  set -x
  $NICER sudo nix-channel --update
  $NICER nix flake update
  #nix build --recreate-lock-file
  set +x
}

apply_colmena () {
  set -x
  check_git_status
  if [ $# -lt 1 ]; then
    echo 'usage: ./nx ac $GROUP'
    echo 'apply-colmena-on-host:  nx ac GROUP host1'
    echo 'apply-colmena-on-hosts: nx ac GROUP host2,host3'
    echo 'apply-colmena-on-tiered-groups-of-hosts: nx ac GROUP host1 host2,host3 host4,host5,host6'
    exit 1
  elif [ $# -eq 1 ]; then
    worker_colmena "$1"
  elif [ $# -gt 1 ]; then
    uber_group="$1"
    shift
    while [ ! -z "$1" ]; do
      worker_colmena $uber_group "$1"
      shift
    done
  else
    echo 'unknown conditions bailing out'
    exit 1
  fi
}

worker_colmena () {
  if [ "${reboot}" = 'true' ]; then
    reboot_arg='--reboot'
  else
    reboot_arg=''
  fi
  THIS_GROUP=$1
  SRC="${NX_DIR}/groups/${THIS_GROUP}"
  if [ -z $2 ]; then
    on_args=""
  else
    on_args="--on $2"
  fi
  cd ${SRC}
  set -x
  colmena apply switch ${reboot_arg} ${on_args}
  set +x
}

get_this_host () {
  if [ ! -z ${HOSTNAME} ]; then
    THIS_HOST=${HOSTNAME}
  else
    THIS_HOST=$(hostname)
  fi
  if [ -z "${THIS_HOST}" ]; then
    echo 'no hostname not sure what to do, bailing out!'
    exit 1
  fi
}

find_flake_nix_dir () {
  get_this_host
  SRC="${NX_DIR}/hosts/${THIS_HOST}"
  if [ -f "${SRC}/flake.nix" ]; then
    check_git_status
    flake_nix_dir=${SRC}
  elif [ -f "${NX_DIR}/flake.nix" ]; then
    check_git_status
    flake_nix_dir=${NX_DIR}
  elif [ -f "/etc/nixos/flake.nix" ]; then
    flake_nix_dir=/etc/nixos
  else
    echo 'cannot find flake.nix, bailing out'
    exit 1
  fi
}

apply_system () {
  if [ "${debug}" = 'true' ]; then
    debug_flags='--show-trace'
  else
    debug_flags=' '
  fi
  if [ "${use_the_force_luke}" = 'true' ]; then
    force_flags='--option eval-cache false'
  else
    force_flags=' '
  fi

  find_flake_nix_dir
  sudo nixos-rebuild switch --flake "${flake_nix_dir}#${THIS_HOST}" $debug_flags $force_flags
}

old_apply_system () {
  # this was used before the above flake method
  # and merely left for historal context
  # I had thought about falling back to it from the above
  # newer apply_system, but I think it would need some reworking
  # for now it's deprecated
  check_git_status
  THIS_USER=root
  THIS_GROUP=root
  get_this_host
  SRC="${NX_DIR}/hosts/${THIS_HOST}"
  if [ -d "${SRC}" ]; then
    TARGET="/etc/nixos"
    CMD="sudo nixos-rebuild switch"
    diff ${SRC} ${TARGET}
    if [ $? -eq 0 ]; then
      echo no change
    else
      sudo rsync -v --chown root:root --chmod 0644 ${SRC}/* ${TARGET}/
    fi
    set -x
    ${CMD}
  else
    echo "cannot find directory ${SRC}, bailing out"
    exit 1
  fi
}

full_auto () {
 # moving away from HM 
 # for personal use
 # might remove these lines altogether
 # or make a flag for them
 # update_user
 # apply_user $@
  update_system
  apply_system $@
  optimizer
}

check_git_status () {
  cd "${NX_DIR}"
  if output=$(git status --porcelain) && [ -z "$output" ]; then
    # Working directory clean
    echo "clean"
  else 
    # Uncommitted changes
    echo "There are uncommitted changes!"
    if [ "$commit" = 'true' ]; then
      auto_commit
    elif command -v lazygit &> /dev/null ; then
      lazygit
    elif [ "${use_the_force_luke}" = 'true' ]; then
      echo 'using the force'
    else
      echo 'use --force or --commit to override'
      exit 1
    fi
  fi
}

garbage_collector ()  {
  $NICER nix-env --delete-generations old
  $NICER nix-store --gc
  #nix-channel --update
  #nix-env -u --always
  #for link in /nix/var/nix/gcroots/auto/*
  #do
  #  sudo rm $(readlink "$link")
  #done
  $NICER nix-collect-garbage -d
}

optimizer () {
  $NICER nix-store --optimize
  garbage_collector $@
}

squawk () {
  # This function simplifies error reporting and verbosity
  # and it always prints its message along with anything in $error_report_log
  # call it by preceding your message with a verbosity level
  # e.g. `squawk 3 "This is a squawk"`
  # if the current verbosity level is greater than or equal to
  # the number given then this function will echo out your message
  # and pad it with # to let you now how verbose that message was
  squawk_lvl=$1
  shift
  squawk="$@"

  if [ ${VERBOSITY} -gt ${squawk_lvl} ] ; then
    if [ ${squawk_lvl} -lt 20 ] ; then
      count_squawk=0
      while [ ${count_squawk} -lt ${squawk_lvl} ]; do
        printf '#'
	count_squawk=$((count_squawk+1))
      done
      printf ' %s\n' "${squawk}"
    else
      printf '#>{ '
      printf '%s' "${squawk_lvl}"
      printf ' }<# '
      printf ' %s\n' "${squawk}"
    fi
  fi
}

nix_search () {
  nix --extra-experimental-features "nix-command flakes" search nixpkgs $1
}

croak () {
    # The difference between squawk and croak is that croak calls exit 1 at the end
  # This function simplifies error reporting on death and verbosity
  # call it by preceding your error message with a verbosity level
  # e.g. `croak 3 "This is a croak"`
  # if the current verbosity level is greater than or equal to
  # the number given then this function will print out your message
  # and pad it with # to let you now how verbose that message was
  croak_lvl="$1"
  shift
  croak="$@"

  if [ -z $error_report_log ]; then
    horizontal_rule
    printf 'Error report log - %s\n' $error_report_log
  fi

  horizontal_rule
  if [ "$VERBOSITY" -ge "$croak_lvl" ] ; then
    if [ "$croak_lvl" -le 20 ] ; then
      count_croak=0
      while [ "$count_croak" -lt "$croak_lvl" ]; do
        printf '#'
	count_croak=$((count_croak+1))
      done
      printf '%s\n'  "$croak"
    else
      printf '#>{ '
      printf '%s' "$croak_lvl"
      printf ' }<# '
      printf ' %s\n'  "$croak"
    fi
  else
    printf ' %s\n'  "$croak"
  fi
  horizontal_rule
  exit 1
}

horizontal_rule () {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

parse_opts $@
